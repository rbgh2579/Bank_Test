<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security
	 http://www.springframework.org/schema/security/spring-security-4.2.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- Namespaces탭 : security 체크후 선택 > 오른쪽 4.2 버전 선택 -->
<!-- 정적리스소 파일(servlet-context.xml에 먼저 추가)에는 보안설정을 하지 않음 -->
	<security:http pattern="/resources/**" security="none" />
	<security:http pattern="/common/**" security="none" />
	<security:http auto-config="true" use-expressions="true" create-session="never">

		<!-- 관리자 권한 영역 -->
		<security:intercept-url	pattern="/**.st" access="hasRole('ROLE_ADMIN')" />
		
		<!-- 권한에 관계없이 접속 가능영역(guest도 접속 가능)  -->
		<security:intercept-url	pattern="/**.do" access="permitAll" />
		
		<!-- 로그인한 사용자 영역(customer + 관리자) -->
		<security:intercept-url	pattern="/**.ad" access="hasRole('ROLE_ADMIN')" />
		<!--  로그인한 사용자 영역(customer + 관리자) 상품 구매 -->
		<security:intercept-url	pattern="/**.sa" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />
		
		<!-- 로그인폼 -->
		<!-- login.do => login_check.do => UserAuthenticationService => 성공/실패/거부 -->
		<!-- 5개 설정을 소스와 일치시켜야 한다. -->
		<security:form-login login-page="/login.do"
					login-processing-url="/login_check.do"
					authentication-success-handler-ref="userLoginSuccessHandler"
					authentication-failure-handler-ref="userLoginFailureHandler"
					username-parameter="id" password-parameter="password" />
		
		<security:session-management>
			<!-- 같은 브라우저에서 여러창 동시접속수 / 세션만료시 이동할 주소 / 최대 세션 초과시 에러 옵션-->
			<security:concurrency-control max-sessions="2" 
				expired-url="/login.do"
				error-if-maximum-exceeded="true"
			/>
		</security:session-management>			
		
		<!-- 접근 권한이 없는 경우 작동 -->
		<security:access-denied-handler ref="userDeniedHandler" />
	</security:http>
	
	<!-- 로그인 성공시 작동 -->
	<bean id="userLoginSuccessHandler" class="com.spring.bank.service.UserLoginSuccessHandler">
		<constructor-arg name="sqlSession" ref="sqlSession" /> 
	</bean>
	
	<!-- 로그인 실패시 작동 -->
	<bean id="userLoginFailureHandler" class="com.spring.bank.service.UserLoginFailureHandler">
		<constructor-arg name="sqlSession" ref="sqlSession" />
		<constructor-arg name="passwordEncoder" ref="bcryptPasswordEncoder" /> 
	</bean>
	
	<!-- 접근 권한이 없는 경우 작동 -->
	<bean id="userDeniedHandler" class="com.spring.bank.service.UserDeniedHandler" />
	
	<!-- 로그인 인증처리 클래스 -->
	<!-- login-processing-url="/login_check.do"에 의해 자동호출  -->
	<bean id="userService" class="com.spring.bank.service.UserAuthenticationService">
		<constructor-arg name="sqlSession" ref="sqlSession" />
	</bean>
	
	<!-- 비밀번호 암호화 클래스 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
</beans>
